"""
Django Secret Key Generator

This module provides functionality to generate secure Django secret keys
and manage them across different environments.
"""

import secrets
import string
from typing import Optional
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.table import Table

from .console import UIFormatter, UIColors

console = Console()


class SecretKeyGenerator:
    """Generate and manage Django secret keys."""
    
    @staticmethod
    def generate_secret_key(length: int = 50) -> str:
        """
        Generate a cryptographically secure Django secret key.
        
        Args:
            length: Length of the secret key (default: 50)
            
        Returns:
            A secure Django secret key
        """
        # Django secret keys should contain letters, digits, and symbols
        alphabet = string.ascii_letters + string.digits + "!@#$%^&*(-_=+)"
        
        # Generate cryptographically secure random string
        secret_key = ''.join(secrets.choice(alphabet) for _ in range(length))
        
        return secret_key
    
    @staticmethod
    def generate_multiple_keys(count: int = 3, length: int = 50) -> list[str]:
        """
        Generate multiple secret keys for different environments.
        
        Args:
            count: Number of keys to generate
            length: Length of each secret key
            
        Returns:
            List of secret keys
        """
        return [SecretKeyGenerator.generate_secret_key(length) for _ in range(count)]
    
    @staticmethod
    def display_secret_keys(keys: list[str], environments: Optional[list[str]] = None) -> None:
        """
        Display secret keys in a formatted table.
        
        Args:
            keys: List of secret keys to display
            environments: Optional list of environment names
        """
        if environments is None:
            environments = [f"Environment {i+1}" for i in range(len(keys))]
        
        table = Table(title="🔐 Django Secret Keys", show_header=True, header_style="bold blue")
        table.add_column("Environment", style="cyan", no_wrap=True)
        table.add_column("Secret Key", style="dim")
        
        for env, key in zip(environments, keys):
            table.add_row(env, key)
        
        console.print(table)
        console.print()
    
    @staticmethod
    def create_env_file_content(secret_key: str, project_name: str) -> str:
        """
        Create .env file content with the secret key.
        
        Args:
            secret_key: The Django secret key
            project_name: Name of the Django project
            
        Returns:
            Content for .env file
        """
        return f"""# Django Environment Variables
# Generated by django-init

# Django Secret Key
SECRET_KEY={secret_key}

# Django Settings
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# Database Configuration
DATABASE_URL=sqlite:///db.sqlite3

# Static Files
STATIC_URL=/static/
STATIC_ROOT=staticfiles

# Media Files
MEDIA_URL=/media/
MEDIA_ROOT=media

# Security Settings
SECURE_SSL_REDIRECT=False
SESSION_COOKIE_SECURE=False
CSRF_COOKIE_SECURE=False

# CORS Settings
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
"""
    
    @staticmethod
    def create_production_env_content(secret_key: str, project_name: str) -> str:
        """
        Create production .env file content with the secret key.
        
        Args:
            secret_key: The Django secret key
            project_name: Name of the Django project
            
        Returns:
            Content for production .env file
        """
        return f"""# Django Production Environment Variables
# Generated by django-init

# Django Secret Key
SECRET_KEY={secret_key}

# Django Settings
DEBUG=False
ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com

# Database Configuration
# Replace with your production database URL
DATABASE_URL=postgresql://user:password@localhost:5432/{project_name}

# Static Files
STATIC_URL=/static/
STATIC_ROOT=/var/www/{project_name}/staticfiles

# Media Files
MEDIA_URL=/media/
MEDIA_ROOT=/var/www/{project_name}/media

# Security Settings
SECURE_SSL_REDIRECT=True
SESSION_COOKIE_SECURE=True
CSRF_COOKIE_SECURE=True
SECURE_BROWSER_XSS_FILTER=True
SECURE_CONTENT_TYPE_NOSNIFF=True

# CORS Settings
CORS_ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
"""


def generate_secret_command():
    """Main command function for generating Django secret keys."""
    UIFormatter.print_header("🔐 Django Secret Key Generator")
    console.print()
    
    # Generate multiple keys for different environments
    keys = SecretKeyGenerator.generate_multiple_keys(3, 50)
    environments = ["Development", "Staging", "Production"]
    
    # Display the keys
    SecretKeyGenerator.display_secret_keys(keys, environments)
    
    # Show usage instructions
    instructions = Text()
    instructions.append("📋 Usage Instructions:\n", style=UIColors.ACCENT)
    instructions.append("1. Copy the appropriate secret key for your environment\n")
    instructions.append("2. Add it to your .env file:\n")
    instructions.append("   SECRET_KEY=your_secret_key_here\n", style=UIColors.CODE)
    instructions.append("3. Or set it as an environment variable:\n")
    instructions.append("   export SECRET_KEY=your_secret_key_here\n", style=UIColors.CODE)
    instructions.append("4. Never commit secret keys to version control!\n", style=UIColors.WARNING)
    
    console.print(Panel(instructions, title="💡 How to Use", border_style="blue"))
    console.print()
    
    # Offer to create .env files
    console.print("Would you like to create .env files with these keys? (y/n): ", style=UIColors.PROMPT, end="")
    
    try:
        response = input().lower().strip()
        if response in ['y', 'yes']:
            _create_env_files(keys, environments)
    except (KeyboardInterrupt, EOFError):
        console.print("\n\nOperation cancelled.", style=UIColors.WARNING)
        return


def _create_env_files(keys: list[str], environments: list[str]) -> None:
    """Create .env files for different environments."""
    project_name = "myproject"  # Default project name
    
    try:
        # Create development .env
        dev_content = SecretKeyGenerator.create_env_file_content(keys[0], project_name)
        with open(".env.development", "w") as f:
            f.write(dev_content)
        UIFormatter.print_success("Created .env.development file")
        
        # Create production .env
        prod_content = SecretKeyGenerator.create_production_env_content(keys[2], project_name)
        with open(".env.production", "w") as f:
            f.write(prod_content)
        UIFormatter.print_success("Created .env.production file")
        
        console.print()
        UIFormatter.print_info("Remember to:")
        console.print("• Rename .env.development to .env for local development")
        console.print("• Update ALLOWED_HOSTS and database settings for production")
        console.print("• Never commit these files to version control!")
        
    except Exception as e:
        UIFormatter.print_error(f"Failed to create .env files: {e}")


if __name__ == "__main__":
    generate_secret_command()
